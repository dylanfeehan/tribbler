// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: api/tribrpc/tribrpc.proto

package tribrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Trib_CreateUser_FullMethodName                = "/Trib/CreateUser"
	Trib_AddSubscription_FullMethodName           = "/Trib/AddSubscription"
	Trib_RemoveSubscription_FullMethodName        = "/Trib/RemoveSubscription"
	Trib_GetSubscriptions_FullMethodName          = "/Trib/GetSubscriptions"
	Trib_PostTribble_FullMethodName               = "/Trib/PostTribble"
	Trib_GetTribbles_FullMethodName               = "/Trib/GetTribbles"
	Trib_GetTribblesBySubscription_FullMethodName = "/Trib/GetTribblesBySubscription"
)

// TribClient is the client API for Trib service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TribClient interface {
	CreateUser(ctx context.Context, in *CreateUserArgs, opts ...grpc.CallOption) (*CreateUserReply, error)
	AddSubscription(ctx context.Context, in *SubscriptionArgs, opts ...grpc.CallOption) (*SubscriptionReply, error)
	RemoveSubscription(ctx context.Context, in *SubscriptionArgs, opts ...grpc.CallOption) (*SubscriptionReply, error)
	GetSubscriptions(ctx context.Context, in *GetSubscriptionsArgs, opts ...grpc.CallOption) (*GetSubscriptionsReply, error)
	PostTribble(ctx context.Context, in *PostTribbleArgs, opts ...grpc.CallOption) (*PostTribbleReply, error)
	GetTribbles(ctx context.Context, in *GetTribblesArgs, opts ...grpc.CallOption) (*GetTribblesReply, error)
	GetTribblesBySubscription(ctx context.Context, in *GetTribblesArgs, opts ...grpc.CallOption) (*GetTribblesReply, error)
}

type tribClient struct {
	cc grpc.ClientConnInterface
}

func NewTribClient(cc grpc.ClientConnInterface) TribClient {
	return &tribClient{cc}
}

func (c *tribClient) CreateUser(ctx context.Context, in *CreateUserArgs, opts ...grpc.CallOption) (*CreateUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, Trib_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribClient) AddSubscription(ctx context.Context, in *SubscriptionArgs, opts ...grpc.CallOption) (*SubscriptionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionReply)
	err := c.cc.Invoke(ctx, Trib_AddSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribClient) RemoveSubscription(ctx context.Context, in *SubscriptionArgs, opts ...grpc.CallOption) (*SubscriptionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionReply)
	err := c.cc.Invoke(ctx, Trib_RemoveSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribClient) GetSubscriptions(ctx context.Context, in *GetSubscriptionsArgs, opts ...grpc.CallOption) (*GetSubscriptionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscriptionsReply)
	err := c.cc.Invoke(ctx, Trib_GetSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribClient) PostTribble(ctx context.Context, in *PostTribbleArgs, opts ...grpc.CallOption) (*PostTribbleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostTribbleReply)
	err := c.cc.Invoke(ctx, Trib_PostTribble_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribClient) GetTribbles(ctx context.Context, in *GetTribblesArgs, opts ...grpc.CallOption) (*GetTribblesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTribblesReply)
	err := c.cc.Invoke(ctx, Trib_GetTribbles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tribClient) GetTribblesBySubscription(ctx context.Context, in *GetTribblesArgs, opts ...grpc.CallOption) (*GetTribblesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTribblesReply)
	err := c.cc.Invoke(ctx, Trib_GetTribblesBySubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TribServer is the server API for Trib service.
// All implementations must embed UnimplementedTribServer
// for forward compatibility.
type TribServer interface {
	CreateUser(context.Context, *CreateUserArgs) (*CreateUserReply, error)
	AddSubscription(context.Context, *SubscriptionArgs) (*SubscriptionReply, error)
	RemoveSubscription(context.Context, *SubscriptionArgs) (*SubscriptionReply, error)
	GetSubscriptions(context.Context, *GetSubscriptionsArgs) (*GetSubscriptionsReply, error)
	PostTribble(context.Context, *PostTribbleArgs) (*PostTribbleReply, error)
	GetTribbles(context.Context, *GetTribblesArgs) (*GetTribblesReply, error)
	GetTribblesBySubscription(context.Context, *GetTribblesArgs) (*GetTribblesReply, error)
	mustEmbedUnimplementedTribServer()
}

// UnimplementedTribServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTribServer struct{}

func (UnimplementedTribServer) CreateUser(context.Context, *CreateUserArgs) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedTribServer) AddSubscription(context.Context, *SubscriptionArgs) (*SubscriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscription not implemented")
}
func (UnimplementedTribServer) RemoveSubscription(context.Context, *SubscriptionArgs) (*SubscriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubscription not implemented")
}
func (UnimplementedTribServer) GetSubscriptions(context.Context, *GetSubscriptionsArgs) (*GetSubscriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptions not implemented")
}
func (UnimplementedTribServer) PostTribble(context.Context, *PostTribbleArgs) (*PostTribbleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTribble not implemented")
}
func (UnimplementedTribServer) GetTribbles(context.Context, *GetTribblesArgs) (*GetTribblesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribbles not implemented")
}
func (UnimplementedTribServer) GetTribblesBySubscription(context.Context, *GetTribblesArgs) (*GetTribblesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTribblesBySubscription not implemented")
}
func (UnimplementedTribServer) mustEmbedUnimplementedTribServer() {}
func (UnimplementedTribServer) testEmbeddedByValue()              {}

// UnsafeTribServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TribServer will
// result in compilation errors.
type UnsafeTribServer interface {
	mustEmbedUnimplementedTribServer()
}

func RegisterTribServer(s grpc.ServiceRegistrar, srv TribServer) {
	// If the following call pancis, it indicates UnimplementedTribServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Trib_ServiceDesc, srv)
}

func _Trib_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trib_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribServer).CreateUser(ctx, req.(*CreateUserArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trib_AddSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribServer).AddSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trib_AddSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribServer).AddSubscription(ctx, req.(*SubscriptionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trib_RemoveSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribServer).RemoveSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trib_RemoveSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribServer).RemoveSubscription(ctx, req.(*SubscriptionArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trib_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trib_GetSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribServer).GetSubscriptions(ctx, req.(*GetSubscriptionsArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trib_PostTribble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTribbleArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribServer).PostTribble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trib_PostTribble_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribServer).PostTribble(ctx, req.(*PostTribbleArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trib_GetTribbles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTribblesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribServer).GetTribbles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trib_GetTribbles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribServer).GetTribbles(ctx, req.(*GetTribblesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trib_GetTribblesBySubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTribblesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TribServer).GetTribblesBySubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trib_GetTribblesBySubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TribServer).GetTribblesBySubscription(ctx, req.(*GetTribblesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Trib_ServiceDesc is the grpc.ServiceDesc for Trib service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trib_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Trib",
	HandlerType: (*TribServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Trib_CreateUser_Handler,
		},
		{
			MethodName: "AddSubscription",
			Handler:    _Trib_AddSubscription_Handler,
		},
		{
			MethodName: "RemoveSubscription",
			Handler:    _Trib_RemoveSubscription_Handler,
		},
		{
			MethodName: "GetSubscriptions",
			Handler:    _Trib_GetSubscriptions_Handler,
		},
		{
			MethodName: "PostTribble",
			Handler:    _Trib_PostTribble_Handler,
		},
		{
			MethodName: "GetTribbles",
			Handler:    _Trib_GetTribbles_Handler,
		},
		{
			MethodName: "GetTribblesBySubscription",
			Handler:    _Trib_GetTribblesBySubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tribrpc/tribrpc.proto",
}
